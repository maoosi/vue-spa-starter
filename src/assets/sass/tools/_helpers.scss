
/* ===============
  Browser mixins
=============== */

@mixin antialias {
	font-smoothing: antialiased;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin unblur() {
    -webkit-filter: blur(0);
    -webkit-font-smoothing: subpixel-antialiased;
    transform-style: preserve-3d;
}

@mixin unselectable {
	-webkit-touch-callout: none;
    -webkit-user-select: none;
	user-select: none;
}

@mixin highlight($color: false) {
    @if $color {
        outline: 1;
        -webkit-tap-highlight-color: $color;
        -moz-tap-highlight-color: $color;
    } @else {
        @include unselectable();
        outline: 0;
        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
        -moz-tap-highlight-color: rgba(0, 0, 0, 0);
    }
}

@mixin hardware($backface: true, $perspective: 1000) {
	@if $backface { backface-visibility: hidden; }
	perspective: $perspective;
}

@mixin selection {
	::-moz-selection { @content; }
	::selection { @content; }
}

@mixin input-placeholder {
	&.placeholder { @content; }
	&:-moz-placeholder { @content; }
	&::-moz-placeholder { @content; }
	&:-ms-input-placeholder { @content; }
	&::-webkit-input-placeholder { @content; }
}

@mixin retina {
	@media only screen and (-webkit-min-device-pixel-ratio: 1.5),
	only screen and (-moz-min-device-pixel-ratio: 1.5),
	only screen and (-o-min-device-pixel-ratio: 3 / 2),
	only screen and (min-device-pixel-ratio: 1.5),
	only screen and (min-resolution: 1.5dppx) {
		@content;
	}
}

/* ===============
  Functions
=============== */

@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

/* ===============
  Styling Mixins
=============== */

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: local('☺︎');

	$extmods: (
		eot: '?',
		svg: '#' + str-replace($name, ' ', '_')
	);

	$formats: (
		otf: 'opentype',
		ttf: 'truetype'
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

@mixin font($variant: default) {
    @each $font, $opts in $fonts {
        @if $variant == $font {
            @each $opt, $value in $opts {
                #{$opt}: $value
            }
        }
    }
}

@mixin clearfix {
	&::after {
		content: '';
		display: table;
		clear: both;
	}
}

@mixin responsive-ratio($x, $y, $pseudo: false) {
	$padding: unquote( ( $y / $x ) * 100 + '%' );

	@if $pseudo {
		&::before {
			@include pseudo($pos: relative);
			width: 100%;
			padding-top: $padding;
		}
	} @else {
		padding-top: $padding;
	}
}

@mixin fluid($property, $min, $max, $start: 320, $end: 992, $clip: true, $clipAtStart: true, $clipAtEnd: true) {
	$start: $start / ($start * 0 + 1);
	$end: $end / ($end * 0 + 1);
	$multiplier: ($max - $min) / ($end - $start) * 100;
	$adder: ($min * $end - $max * $start) / ($end - $start);
	$formula: calc(#{$multiplier + 0vw} + #{$adder + 0px});
	@if $clip and $clipAtStart {
		@media (max-width: #{$start + 0px}) {
			#{$property}: $min + 0px;
		}
	}
	@if $clip and $clipAtEnd {
		@media (min-width: #{$end + 0px}) {
			#{$property}: $max + 0px;
		}
	}
	#{$property}: $formula;
}

@mixin valign($valign: middle) {
    display: table;
    width: 100%;
    height: 100%;

    & > * {
        display: table-cell;
        vertical-align: $valign;
        width: 100%;
        height: 100%;
        position: relative;
    }
}

@mixin unspace($margin: true, $padding: true) {
    @if $margin { margin: 0; }
    @if $padding { padding: 0; }
}

@mixin unlist($display: false) {
    @include unspace();
    list-style-type: none;
    @if $display { & > li { display: $display; } }
}

@mixin spread($horizontal: false, $vertical: false) {
    @if $horizontal {
        & > *:not(:last-child) { margin-right: $horizontal; }
    }
    @if $vertical {
        & > *:not(:last-child) { margin-bottom: $vertical; }
    }
}

@mixin underline($distance: 0, $height: 1px, $color: #000, $width: 100%, $parent: true) {
    @if $parent == true {
        display: inline-block;
        position: relative;
    }

    &::after {
        content: '';
        transition: inherit;
        display: block;
        position: absolute;
        bottom: $distance * -1;
        left: calc((100% - #{$width}) / 2);
        width: $width;
        height: $height;
        background-color: $color;
    }
}
